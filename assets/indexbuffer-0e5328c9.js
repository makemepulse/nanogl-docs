import{b as n}from"./route-block-83d24a4e.js";import{o as a,c as t,d as p}from"./index-d975412e.js";const e={class:"markdown-body"},o=p(`<div class="content-wrapper"><h1 id="indexbuffer" tabindex="-1">IndexBuffer</h1><p>The IndexBuffer class provides helpers for <code class="language-js"><span class="token constant">ELEMENT_ARRAY_BUFFER</span></code> type buffers :</p><ul><li>populating with data</li><li>changing type</li><li>drawing commands</li></ul><h2 id="create" tabindex="-1">Create an indexbuffer</h2><p>You can create an indexbuffer with the <code class="language-js">IndexBuffer</code> class, providing options or not.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> IndexBuffer <span class="token keyword">from</span> <span class="token string">&quot;nanogl/indexbuffer&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// you can specify initial datatype</span>
<span class="token keyword">const</span> bufferDataType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">UNSIGNED_BYTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// you can provide initial data</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bufferData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">UNSIGNED_BYTE</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// you can specify a usage hint for the buffer</span>
<span class="token keyword">const</span> bufferHint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">UNSIGNED_BYTE</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">DYNAMIC_DRAW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="set-type" tabindex="-1">Set data type</h2><p>Change the type of the indexbuffer data with the <code class="language-js">setType</code> function.</p><pre class="language-js"><code class="language-js"><span class="token comment">// set type to GL_UNSIGNED_INT</span>
buffer<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">UNSIGNED_INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="populate" tabindex="-1">Populate Buffer</h2><p>You can set the indexbuffer data from a TypedArray with the <code class="language-js">data</code> function. You can also pass a uint to allocate the buffer size instead.</p><pre class="language-js"><code class="language-js"><span class="token comment">// allocate buffer with TypedArray</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// allocate buffer size</span>
buffer<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>You can also set a part of the arraybuffer data from a TypedArray with the <code class="language-js">subData</code> function. You need to provide the offset in byte where the data will be written.</p><pre class="language-js"><code class="language-js"><span class="token comment">// update buffer data, starting at third float</span>
<span class="token keyword">const</span> partData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">subData</span><span class="token punctuation">(</span>partData<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="drawing-commands" tabindex="-1">Drawing commands</h2><p>IndexBuffer provides <code class="language-js">gl<span class="token punctuation">.</span>drawElements</code> shortcuts.</p><p>You can provide options, in order :</p><ul><li>the number of indices to draw</li><li>the position (in bytes) of the first index to draw</li></ul><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> offset <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

<span class="token comment">// GL_POINTS</span>
buffer<span class="token punctuation">.</span><span class="token function">drawPoints</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_LINE_STRIP</span>
buffer<span class="token punctuation">.</span><span class="token function">drawLineStrip</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_LINE_LOOP</span>
buffer<span class="token punctuation">.</span><span class="token function">drawLineLoop</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_LINES</span>
buffer<span class="token punctuation">.</span><span class="token function">drawLines</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_TRIANGLE_STRIP</span>
buffer<span class="token punctuation">.</span><span class="token function">drawTriangleStrip</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_TRIANGLE_FAN</span>
buffer<span class="token punctuation">.</span><span class="token function">drawTriangleFan</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_TRIANGLES</span>
buffer<span class="token punctuation">.</span><span class="token function">drawTriangles</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
</code></pre><p>You can also use the <code class="language-js">draw</code> function, choosing the type of primitive to draw.</p><pre class="language-js"><code class="language-js"><span class="token comment">// draw GL_TRIANGLES type</span>
buffer<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TRIANGLES</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
</code></pre><h2 id="delete" tabindex="-1">Delete the indexbuffer</h2><p>You can delete the webgl buffer with the <code class="language-js">dispose</code> function.</p><pre class="language-js"><code class="language-js">buffer<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="toc-wrapper"><p><div class="toc"><h2 class="my-8">Summary</h2><ul><li><a href="#create">Create an indexbuffer</a></li><li><a href="#set-type">Set data type</a></li><li><a href="#populate">Populate Buffer</a></li><li><a href="#drawing-commands">Drawing commands</a></li><li><a href="#delete">Delete the indexbuffer</a></li></ul></div></p></div>`,2),c=[o],u={__name:"indexbuffer",setup(l,{expose:s}){return s({frontmatter:{}}),(k,r)=>(a(),t("div",e,c))}};typeof n=="function"&&n(u);export{u as default};
