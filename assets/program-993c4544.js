import{_ as l}from"./UICallout.vue_vue_type_script_setup_true_lang-f972502f.js";import{b as p}from"./route-block-83d24a4e.js";import{o as r,c as i,a,w as t,d as n,e as s,b as e,g as k}from"./index-5dcb3d0b.js";const m={class:"markdown-body"},g=e(`<p><div class="table-of-contents"><ul><li><a href="#program">Program</a><ul><li><a href="#create">Create a program</a></li><li><a href="#bind-program">Bind program</a></li><li><a href="#uniforms">Uniforms</a></li><li><a href="#samplers">Samplers</a></li><li><a href="#attributes">Attributes</a></li></ul></li></ul></div></p><h1 id="program" tabindex="-1">Program</h1><p>The Program class provides <strong>shader compilation</strong> and <strong>gl program linking</strong> functionality.</p><p>It also give you convenient access to <strong>active uniforms and attributes</strong>.</p><h2 id="create" tabindex="-1">Create a program</h2><p>You can create a program with the <code class="language-js">Program</code> class, providing its code as strings. The program will be compiled on its creation.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> Program <span class="token keyword">from</span> <span class="token string">&quot;nanogl/program&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// create a new Program with a given gl context,</span>
<span class="token comment">// the vertex shader code &amp; the fragment shader code</span>
<span class="token keyword">const</span> prg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Program</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> vertexCode<span class="token punctuation">,</span> fragmentCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>You can also create the program, then compile it with the code.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> Program <span class="token keyword">from</span> <span class="token string">&quot;nanogl/program&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// create a new Program with a given gl context</span>
<span class="token keyword">const</span> prg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Program</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// compile program with code strings</span>
prg<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>vertexCode<span class="token punctuation">,</span> fragmentCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="bind-program" tabindex="-1">Bind program</h2><p>You can bind the program with the <code class="language-js">use</code> function.</p><pre class="language-js"><code class="language-js">prg<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="uniforms" tabindex="-1">Uniforms</h2><p>Once compiled, the Program object lists <strong>all used uniforms</strong> and provides a <strong>setter function</strong> for each one.</p>`,14),d=n("p",null,[n("strong",null,"Example :"),s(" if we write "),n("code",{class:"language-glsl"},[n("span",{class:"token keyword"},"uniform"),s(),n("span",{class:"token keyword"},"vec3"),s(" uDirection"),n("span",{class:"token punctuation"},";")]),s(" in our shader, once compiled, we can use "),n("code",{class:"language-js"},[s("program"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"uDirection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")])],-1),f=n("p",null,"A uniform setter function supports :",-1),h=n("ul",null,[n("li",null,[s("providing values as Array or TypedArray arguments ("),n("code",{class:"language-glsl"},"uniformNfv"),s(")")]),n("li",null,[s("providing values as arguments directly (except for matrices) ("),n("code",{class:"language-glsl"},"uniformNf"),s(")")])],-1),b=n("p",null,[n("strong",null,"Important :"),s(" The program must be bound before using uniform setters.")],-1),_=e(`<pre class="language-js"><code class="language-js">prg<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// set a mat4 uniform with a Float32Array or array</span>
prg<span class="token punctuation">.</span><span class="token function">uModelViewProjection</span><span class="token punctuation">(</span>mvpMatrix<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// set a vec3 with separate arguments</span>
prg<span class="token punctuation">.</span><span class="token function">uColor</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// set a vec3 with a (Typed)Array</span>
prg<span class="token punctuation">.</span><span class="token function">uColor</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>A setter function returns the uniform location, so it can also be used like getter when invoked with no arguments.</p><pre class="language-js"><code class="language-js"><span class="token comment">// call the setter without arguments to get the uniform location</span>
<span class="token comment">// and set the uniform values manually</span>
gl<span class="token punctuation">.</span><span class="token function">uniform3f</span><span class="token punctuation">(</span>prg<span class="token punctuation">.</span><span class="token function">uColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="samplers" tabindex="-1">Samplers</h2>`,4),w=n("p",null,[n("strong",null,"Important :"),s(" The program must be bound before using sampler/texture setters.")],-1),v=e(`<pre class="language-js"><code class="language-js">prg<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// link GL_TEXTURE1 unit to uTexture</span>
prg<span class="token punctuation">.</span><span class="token function">uTexture</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or directly provide a Texture instance</span>
<span class="token comment">// in this case, the texture is bound, and assigned to the predefined unit for this sampler</span>
prg<span class="token punctuation">.</span><span class="token function">uTexture</span><span class="token punctuation">(</span>myNanoglTexture<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// as before, you can also get the uniform location</span>
<span class="token comment">// and set the uniform values manually</span>
gl<span class="token punctuation">.</span><span class="token function">uniform1i</span><span class="token punctuation">(</span>prg<span class="token punctuation">.</span><span class="token function">uTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="attributes" tabindex="-1">Attributes</h2><p>Once compiled, the Program object also provides a <strong>getter function</strong> for each attribute, which returns the attribute location.</p>`,3),y=n("p",null,[n("strong",null,"Example :"),s(" if we write "),n("code",{class:"language-glsl"},[n("span",{class:"token keyword"},"attribute"),s(),n("span",{class:"token keyword"},"vec3"),s(" aPosition"),n("span",{class:"token punctuation"},";")]),s(" in our shader, once compiled, we can use "),n("code",{class:"language-js"},[s("program"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"aPosition"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")])],-1),x=n("p",null,[n("strong",null,"Important :"),s(" The program must be bound before using call related gl methods.")],-1),j=e(`<pre class="language-js"><code class="language-js">prg<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// set the attribute data using the attribute location</span>
gl<span class="token punctuation">.</span><span class="token function">vertexAttribPointer</span><span class="token punctuation">(</span>prg<span class="token punctuation">.</span><span class="token function">aPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">FLOAT</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>`,1),T={__name:"program",setup(P,{expose:c}){return c({frontmatter:{}}),(A,N)=>{const o=l,u=k("router-link");return r(),i("div",m,[g,a(o,null,{default:t(()=>[d]),_:1}),f,h,a(o,{type:"important"},{default:t(()=>[b]),_:1}),_,n("p",null,[s("Textures/samplers work like the other uniforms, but the setter function also supports providing a nanogl "),a(u,{to:"/guide/quick-guides/texture-2d"},{default:t(()=>[s("Texture2D")]),_:1}),s(" argument.")]),a(o,{type:"important"},{default:t(()=>[w]),_:1}),v,a(o,null,{default:t(()=>[y]),_:1}),a(o,{type:"important"},{default:t(()=>[x]),_:1}),j])}}};typeof p=="function"&&p(T);export{T as default};
