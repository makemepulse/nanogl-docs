import{_ as e}from"./UICallout.vue_vue_type_script_setup_true_lang-cfee537d.js";import{b as s}from"./route-block-83d24a4e.js";import{A as o,C as c,E as n,O as u,I as l,P as a,J as r}from"./runtime-core.esm-bundler-b2e16801.js";const i={class:"markdown-body"},k={class:"content-wrapper"},f=a(`<h1 id="arraybuffer" tabindex="-1">ArrayBuffer</h1><p>The ArrayBuffer class provides helpers for <code class="language-js"><span class="token constant">ARRAY_BUFFER</span></code> type buffers :</p><ul><li>populating with data</li><li>handling attributes</li><li>drawing commands</li></ul><h2 id="create" tabindex="-1">Create an arraybuffer</h2><p>You can create an arraybuffer with the <code class="language-js">ArrayBuffer</code> class, providing options or not.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> ArrayBuffer <span class="token keyword">from</span> <span class="token string">&quot;nanogl/arraybuffer&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// you can provide initial data</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bufferData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// you can specify a usage hint for the buffer</span>
<span class="token keyword">const</span> bufferHint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> data<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">DYNAMIC_DRAW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="populate" tabindex="-1">Populate buffer</h2><p>You can set the arraybuffer data from a TypedArray with the <code class="language-js">data</code> function. You can also pass a uint to allocate the buffer size instead.</p><pre class="language-js"><code class="language-js"><span class="token comment">// allocate buffer with TypedArray</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// allocate buffer size</span>
buffer<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>You can also set a part of the arraybuffer data from a TypedArray with the <code class="language-js">subData</code> function. You need to provide the offset in byte where the data will be written.</p><pre class="language-js"><code class="language-js"><span class="token comment">// update buffer data, starting at third float</span>
<span class="token keyword">const</span> partData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">subData</span><span class="token punctuation">(</span>partData<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="attributes" tabindex="-1">Attributes</h2><p>You can add attribute declaration for this buffer with the <code class="language-js">attrib</code> function. You need to specify the name &amp; size of the attribute, as well as the type of the data.</p><pre class="language-js"><code class="language-js"><span class="token comment">// create 4 vertices (vec3 position + vec2 uvs)</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
   <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
   <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// aPosition is a vec3</span>
buffer<span class="token punctuation">.</span><span class="token function">attrib</span><span class="token punctuation">(</span><span class="token string">&#39;aPosition&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">FLOAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// you can also specify if the data must be normalized</span>
buffer<span class="token punctuation">.</span><span class="token function">attrib</span><span class="token punctuation">(</span><span class="token string">&#39;aTexCoord&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">FLOAT</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>You can then link the buffer to the given program attributes with the <code class="language-js">attribPointer</code> function.</p>`,15),d=n("p",null,[n("strong",null,"Important :"),r(" The attribute must be declared before using the attribPointer function.")],-1),m=a(`<pre class="language-js"><code class="language-js"><span class="token comment">// setup vertex attribute pointer of a given program</span>
buffer<span class="token punctuation">.</span><span class="token function">attribPointer</span><span class="token punctuation">(</span>program<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="drawing-commands" tabindex="-1">Drawing commands</h2><p>ArrayBuffer provides <code class="language-js">gl<span class="token punctuation">.</span>drawArrays</code> shortcuts.</p><p>You can provide options, in order :</p><ul><li>the number of vertices to draw</li><li>the position (in bytes) of the first vertex to draw</li></ul><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> offset <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

<span class="token comment">// GL_POINTS</span>
buffer<span class="token punctuation">.</span><span class="token function">drawPoints</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_LINE_STRIP</span>
buffer<span class="token punctuation">.</span><span class="token function">drawLineStrip</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_LINE_LOOP</span>
buffer<span class="token punctuation">.</span><span class="token function">drawLineLoop</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_LINES</span>
buffer<span class="token punctuation">.</span><span class="token function">drawLines</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_TRIANGLE_STRIP</span>
buffer<span class="token punctuation">.</span><span class="token function">drawTriangleStrip</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_TRIANGLE_FAN</span>
buffer<span class="token punctuation">.</span><span class="token function">drawTriangleFan</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token comment">// GL_TRIANGLES</span>
buffer<span class="token punctuation">.</span><span class="token function">drawTriangles</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
</code></pre><p>You can also use the <code class="language-js">draw</code> function, choosing the type of primitive to draw.</p><pre class="language-js"><code class="language-js"><span class="token comment">// draw GL_TRIANGLES type</span>
buffer<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TRIANGLES</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
</code></pre><h2 id="delete" tabindex="-1">Delete the arraybuffer</h2><p>You can delete the webgl buffer with the <code class="language-js">dispose</code> function.</p><pre class="language-js"><code class="language-js">buffer<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>`,11),b=a('<div class="toc-wrapper"><p><div class="toc"><h2 class="my-8">Summary</h2><ul><li><a href="#create">Create an arraybuffer</a></li><li><a href="#populate">Populate buffer</a></li><li><a href="#attributes">Attributes</a></li><li><a href="#drawing-commands">Drawing commands</a></li><li><a href="#delete">Delete the arraybuffer</a></li></ul></div></p></div>',1),g={__name:"arraybuffer",setup(h,{expose:t}){return t({frontmatter:{}}),(w,_)=>{const p=e;return o(),c("div",i,[n("div",k,[f,u(p,{type:"important"},{default:l(()=>[d]),_:1}),m]),b])}}};typeof s=="function"&&s(g);export{g as default};
